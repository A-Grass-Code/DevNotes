
=== git 常用命令 ===


============================================================================================

== 配置 ====

# 全局配置
 git config --global user.name  [你的用户名]
 git config --global user.email [你的邮箱地址]

# 当前项目配置
 git config user.name  [你的用户名]
 git config user.email [你的邮箱地址]


============================================================================================

== 变更 ====

# 克隆代码
 git clone [远端仓库地址]

#克隆分支
git clone -b 分支名 地址

# 查看当前状态
 git status

# 增加\删除\修改 文件
 git add -A    # 加入所有变化
 git add -u    # 加入被修改(modified)和被删除(deleted)文件，不包括新文件(new)
 git add .     # 加入新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件

# 提交代码
 git commit -m "提交描述"


============================================================================================

== 分支 ====

# 查看所有本地分支
 git branch

# 查看所有远端分支
 git branch -r

# 查看所有本地和远端的分支
 git branch -a

# 新建一个本地分支，但依然停留在当前分支
 git branch [branch-name]

# 新建一个本地分支，并切换到该分支
 git checkout -b [branch-name]

# 切换到指定分支，并更新工作区
 git checkout [branch-name]

# 合并指定分支到当前分支
 git merge [branch]

# 上传本地指定分支到远程仓库 
$ git push [origin] [branch]

# 删除本地分支
 git branch -d [branch-name]

# 删除远程分支
 git push origin --delete [branch-name]
 git branch -dr [origin/branch]

# 同步远端已经删除的分支（当远端已经删除，当本地依然有时 使用）
 git remote prune origin

============================================================================================

== 同步 ====

# 获取远端新变化，并与本地分支合并
 git pull [branch]

# 推从本地分支到远端仓库
 git push [branch]

# 重置当前分支到指定的 commit ，同时重置暂存区，但工作区不变
 git reset [commit]


============================================================================================
============================================================================================

== 使用 git 来管理的代码的常规步骤 ====

1. 克隆远端仓库

2. 拉取主分支的新代码

3. 创建自己的本地分支

4. 在自己的本地分支上改动代码

5. 完成后提交代码至自己的本地分支

6. 切换到你将要上传的远端分支

7. 获取远端新变化

8. 再次切换到本地自己修改过的分支上

9. 把上一步拉取新变化的分支代码合并到自己的本地分支上

10. 推送自己的本地分支到远端

11. 在远端提交合并请求 （ 把自己修改的分支往主分支上合并 ）

当上述步骤完成后，代码审核人会批复你所提交的合并请求
当你所改动的代码分支成功合并到主分支后，请删除你的本地分支 （ 不再使用的分支 ）
继续上面的第 2 步操作



